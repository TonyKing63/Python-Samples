# -*- coding: utf-8 -*-
#
# generated by wxGlade 0.6.7 (standalone edition) on Tue Aug 20 10:29:49 2013
#
import wx
import os


class MyFrame(wx.Frame):
    treetctrl = 0

    def __init__(self, parent, ID, title):
        wx.Frame.__init__(self, parent, ID, title)
        #scroll = wx.ScrolledWindow(self,-1)
        self.treectrl = wx.TreeCtrl(self)
        self.treeroot = self.treectrl.AddRoot(r'e:\lab')
        # 添加子目录
        self.AddItem(self.treeroot, r'e:\lab')

        #self.Bind(wx.EVT_SIZE, self.onSize)
        self.Bind(wx.EVT_TREE_BEGIN_DRAG, self.OnBeginDrag)

    #实现目录树:通过遍历路径
    def AddItem(self, root, path):
        for i in os.listdir(path):
            # 获得绝对路径
            tmpdir = path + '\\' + i

            # 如果是路径的话 还需对该路径进行一次操作
            if os.path.isdir(tmpdir):
                child = self.treectrl.AppendItem(root, i)
                self.AddItem(child, tmpdir)
            # 如果是目录的话
            else:
                child = self.treectrl.AppendItem(root, i)

    def onSize(self, event):
        self.treectrl.SetSize(self.GetClientSizeTuple())

    #----------------------------------------------------------------------
    def OnBeginDrag(self, event):
        """拖拽treectrl事件"""
        item = event.GetItem()
        self.list = self.treectrl.GetItemText(item)
        self.GetCurrentPath(item)
        path = os.path.join("e:\\lab", self.list)
        print(path)

    #获取当前的文件的路径
    def GetCurrentPath(self, item):
        ItemParent = self.treectrl.GetItemParent(item)
        itemtext = self.treectrl.GetItemText(ItemParent)
        print("-->", itemtext)
        if itemtext == r"e:\lab":
            return
        self.list = itemtext + "\\" + self.list
        #print self.list
        self.GetCurrentPath(ItemParent)

    #获取treectrl  item text
    def GetItemText(self, item):
        if item:
            return self.treectrl.GetItemText(item)
        else:
            "return"


class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame(None, -1, "Hello from wxPython")
        frame.Show(True)
        self.SetTopWindow(frame)
        return True


app = MyApp(False)
app.MainLoop()